<!--
     WARNING: This DTD will fail to validate Boolean operations
        involving AND, OR, NOT due to the redefinition conflict
        with Formulae AND, OR, NOT.
-->

        <!-- Advance declaration of ENTITIES -->

        <!-- IV.3. Formulae -->
        <!ENTITY % formula
                "(event | gate | house-event | basic-event | constant
| and | or | not | xor | iff | nand | nor | atleast | cardinality)">


        <!-- V.2.1. Entities -->
        <!ENTITY % value "(bool | int | float)">
        <!ENTITY % numerical-operation
                "(neg | add | sub | mul | div | pi | abs | acos | asin | atan | cos
| cosh | exp | log | log10 | mod | pow | sin | sinh | tan | tanh
| sqrt | ceil | floor | min | max | mean)">
        <!ENTITY % Boolean-operation "(bool_not | bool_and | bool_or | eq | df
| lt | gt | leq | geq)">
        <!ENTITY % conditional-operation "(ite | switch)">
        <!ENTITY % operation
                "(%numerical-operation; | %Boolean-operation; | %conditional-operation;)">
        <!ENTITY % built-in
                "(exponential | GLM | Weibull | periodic-test | extern-function)">
        <!ENTITY % random-deviate
                "(uniform-deviate | normal-deviate | lognormal-deviate | gamma-deviate
| beta-deviate | histogram)">
        <!ENTITY % test-event "(test-initiating-event | test-functional-event)">
        <!ENTITY % expression
                "(%value; | parameter | system-mission-time | %operation; | %built-in;
| %random-deviate; | %test-event;)">

        <!-- II.3. Instructions, Rules -->

        <!ENTITY % set "(set-gate | set-house-event | set-basic-event | set-parameter)">
        <!ENTITY % collect "(collect-formula | collect-expression)">
        <!ENTITY % instruction "(%set; | %collect; | if | block | rule | event-tree)">


        <!-- I. Calculation Layer -->

        <!-- I.1. Models -->

        <!ELEMENT opsa-mef
                (label?, attributes?,
                        (
                                define-event-tree
                                | define-alignment
                                | define-consequence-group | define-consequence
                                | define-rule
                                | define-initiating-event-group | define-initiating-event
                                | define-fault-tree
                                | define-substitution
                                | define-CCF-group
                                | include
                                )*,
                        model-data?
                        )
                >

        <!ELEMENT label (#PCDATA)>

        <!ELEMENT attributes (attribute*)>
        <!ELEMENT attribute EMPTY>
        <!ATTLIST attribute
                name CDATA #REQUIRED
                value CDATA #REQUIRED
                type CDATA #IMPLIED
                >

        <!ELEMENT include EMPTY>
        <!ATTLIST include file CDATA #REQUIRED>


        <!-- I.2. Consequences, Consequence Groups -->

        <!ELEMENT define-consequence (label?, attributes?, initiating-event, sequence)>
        <!ATTLIST define-consequence name CDATA #REQUIRED>

        <!ELEMENT define-consequence-group
                (label?, attributes?, (consequence | consequence-group)*)>
        <!ATTLIST define-consequence-group name CDATA #REQUIRED>

        <!ELEMENT consequence EMPTY>
        <!ATTLIST consequence name CDATA #REQUIRED>

        <!ELEMENT consequence-group EMPTY>
        <!ATTLIST consequence-group name CDATA #REQUIRED>

        <!ELEMENT sequence EMPTY>
        <!ATTLIST sequence name CDATA #REQUIRED>


        <!-- I.3. Missions, Phases -->

        <!ELEMENT define-alignment (label?, attributes?, (%instruction;)*)>
        <!ATTLIST define-alignment
                name CDATA #REQUIRED
                time-fraction CDATA #REQUIRED
                >


        <!-- II. Event Tree Layer -->

        <!-- II.1. Initiating events, Initiating event Groups -->

        <!ENTITY % collected-item "(basic-event | gate | parameter)">

        <!ELEMENT define-initiating-event
                (label?, attributes?, (%collected-item; | consequence | consequence-group))>
        <!ATTLIST define-initiating-event name CDATA #REQUIRED>

        <!ELEMENT define-initiating-event-group
                (label?, attributes?, (initiating-event | initiating-event-group)+)>
        <!ATTLIST define-initiating-event-group name CDATA #REQUIRED>

        <!ELEMENT initiating-event EMPTY>
        <!ATTLIST initiating-event
                name CDATA #REQUIRED
                event-tree CDATA #IMPLIED
                >

        <!ELEMENT initiating-event-group EMPTY>
        <!ATTLIST initiating-event-group
                name CDATA #REQUIRED
                event-tree CDATA #IMPLIED
                >


        <!-- II.2. Event Trees -->

        <!ENTITY % end-state "(sequence | branch)">
        <!ENTITY % branch "((%instruction;)*, (fork | %end-state;))">

        <!ELEMENT define-event-tree
                (label?, attributes?,
                        define-functional-event*,
                        define-sequence*,
                        define-branch*,
                        initial-state)
                >
        <!ATTLIST define-event-tree name CDATA #REQUIRED>

        <!ELEMENT define-functional-event (label?, attributes?)>
        <!ATTLIST define-functional-event name CDATA #REQUIRED>

        <!ELEMENT define-sequence (label?, attributes?, (%instruction;)+)>
        <!ATTLIST define-sequence name CDATA #REQUIRED>

        <!ELEMENT define-branch (label?, attributes?, %branch;)>
        <!ATTLIST define-branch name CDATA #REQUIRED>

        <!ELEMENT fork (path)+>
        <!ATTLIST fork functional-event CDATA #REQUIRED>

        <!ELEMENT path (%branch;)>
        <!ATTLIST path state CDATA #REQUIRED>

        <!ELEMENT initial-state (%branch;)>

        <!ELEMENT branch EMPTY>
        <!ATTLIST branch name CDATA #REQUIRED>


        <!-- II.3. Instructions, Rules -->

        <!ENTITY % directions "(forward | backward | both)">

        <!ELEMENT set-gate (%formula;)>
        <!ATTLIST set-gate
                name CDATA #REQUIRED
                direction (directions) #IMPLIED
                >

        <!ELEMENT set-house-event (constant)>
        <!ATTLIST set-house-event
                name CDATA #REQUIRED
                direction (directions) #IMPLIED
                >

        <!ELEMENT set-basic-event (%expression;)>
        <!ATTLIST set-basic-event
                name CDATA #REQUIRED
                direction (directions) #IMPLIED
                >

        <!ELEMENT set-parameter (%expression;)>
        <!ATTLIST set-parameter
                name CDATA #REQUIRED
                direction (directions) #IMPLIED
                >

        <!ELEMENT if (%expression;, %instruction;, (%instruction;)?)>
        <!ELEMENT collect-formula (%formula;)>
        <!ELEMENT collect-expression (%expression;)>
        <!ELEMENT block ((%instruction;)*)>

        <!ELEMENT event-tree EMPTY>
        <!ATTLIST event-tree name CDATA #REQUIRED>

        <!ELEMENT rule EMPTY>
        <!ATTLIST rule name CDATA #REQUIRED>

        <!ELEMENT define-rule (label?, attributes?, (%instruction;)+)>
        <!ATTLIST define-rule name CDATA #REQUIRED>


        <!-- III. Meta-Logical Layer -->

        <!-- III.1. CCF-Groups -->

        <!ELEMENT define-CCF-group
                (label?, attributes?, members, distribution, (factor | factors))>
        <!ATTLIST define-CCF-group
                name CDATA #REQUIRED
                model (beta-factor | MGL | alpha-factor | phi-factor) #REQUIRED
                >

        <!ELEMENT members (basic-event+)>
        <!ELEMENT factors (factor+)>

        <!ELEMENT factor (%expression;)>
        <!ATTLIST factor level CDATA #REQUIRED>


        <!-- III.2. Substitutions -->

        <!ELEMENT distribution (%expression;)>
        <!ELEMENT define-substitution
                (label?, attributes?, hypothesis, source?, target)>
        <!ATTLIST define-substitution
                name CDATA #IMPLIED
                type CDATA #IMPLIED
                >

        <!ELEMENT hypothesis (%formula;)>
        <!ELEMENT source (basic-event+)>
        <!ELEMENT target (basic-event+ | %formula;)>


        <!-- IV. Fault Tree Layer -->

        <!-- IV.1. Definitions of Fault Trees & Components -->

        <!ELEMENT define-fault-tree
                (label?, attributes?,
                        (
                                define-substitution | define-CCF-group
                                | define-component
                                | define-gate | define-house-event
                                | define-basic-event | define-parameter
                                | include
                                )*
                        )
                >
        <!ATTLIST define-fault-tree name CDATA #REQUIRED>

        <!ELEMENT define-component
                (label?, attributes?,
                        (
                                define-substitution | define-CCF-group
                                | define-component
                                | define-gate | define-house-event
                                | define-basic-event | define-parameter
                                | include
                                )*
                        )
                >
        <!ATTLIST define-component
                name CDATA #REQUIRED
                role (private | public) #IMPLIED
                >

        <!ELEMENT model-data
                (define-house-event | define-basic-event | define-parameter | include)*>


        <!-- IV.2. Definitions of Gates, House Events & Basic Events -->

        <!ELEMENT define-gate (label?, attributes?, %formula;)>
        <!ATTLIST define-gate
                name CDATA #REQUIRED
                role (private | public) #IMPLIED
                >

        <!ELEMENT define-house-event (label?, attributes?, constant?)>
        <!ATTLIST define-house-event
                name CDATA #REQUIRED
                role (private | public) #IMPLIED
                >

        <!ELEMENT define-basic-event (label?, attributes?, (%expression;)?)>
        <!ATTLIST define-basic-event
                name CDATA #REQUIRED
                role (private | public) #IMPLIED
                >


        <!-- IV.3. Formulae -->

        <!ENTITY % event-type "(gate | house-event | basic-event)">

        <!ELEMENT event EMPTY>
        <!ATTLIST event
                name CDATA #REQUIRED
                type %event-type; #IMPLIED
                >

        <!ELEMENT gate EMPTY>
        <!ATTLIST gate name CDATA #REQUIRED>

        <!ELEMENT house-event EMPTY>
        <!ATTLIST house-event name CDATA #REQUIRED>

        <!ELEMENT basic-event EMPTY>
        <!ATTLIST basic-event name CDATA #REQUIRED>

        <!ELEMENT and ((%formula;)+)>
        <!ELEMENT or ((%formula;)+)>
        <!ELEMENT not (%formula;)>
        <!ELEMENT xor ((%formula;)+)>
        <!ELEMENT iff ((%formula;)+)>
        <!ELEMENT nand ((%formula;)+)>
        <!ELEMENT nor ((%formula;)+)>
        <!ELEMENT atleast ((%formula;)+)>
        <!ATTLIST atleast min CDATA #REQUIRED>

        <!ELEMENT cardinality ((%formula;)+)>
        <!ATTLIST cardinality min CDATA #REQUIRED max CDATA #REQUIRED>

        <!ELEMENT imply (%formula;, %formula;)>

        <!ELEMENT constant EMPTY>
        <!ATTLIST constant value (true | false) #REQUIRED>


        <!-- V. Stochastic Layer -->

        <!-- V.1. Definition of Parameters -->

        <!ENTITY % units
                "(bool | int | float | hours | hours-1 | years | years-1 | fit | demands)">
        <!ELEMENT define-parameter (label?, attributes?, %expression;)>
        <!ATTLIST define-parameter
                name CDATA #REQUIRED
                role (private | public) #IMPLIED
                unit %units; #IMPLIED
                >


        <!-- V.2. Expressions -->

        <!-- V.2.1. Entities -->

        <!-- V.2.2. Constants, Parameters -->

        <!ELEMENT bool EMPTY>
        <!ATTLIST bool value (true | false) #REQUIRED>

        <!ELEMENT int EMPTY>
        <!ATTLIST int value CDATA #REQUIRED>

        <!ELEMENT float EMPTY>
        <!ATTLIST float value CDATA #REQUIRED>

        <!ELEMENT system-mission-time EMPTY>
        <!ATTLIST system-mission-time unit %units; #IMPLIED>

        <!ELEMENT parameter EMPTY>
        <!ATTLIST parameter
                name CDATA #REQUIRED
                unit %units; #IMPLIED
                >


        <!-- V.2.3. Numerical Expressions -->

        <!ELEMENT neg (%expression;)>
        <!ELEMENT add ((%expression;)+)>
        <!ELEMENT sub ((%expression;)+)>
        <!ELEMENT mul ((%expression;)+)>
        <!ELEMENT div ((%expression;)+)>
        <!ELEMENT pi EMPTY>
        <!ELEMENT abs (%expression;)>
        <!ELEMENT acos (%expression;)>
        <!ELEMENT asin (%expression;)>
        <!ELEMENT atan (%expression;)>
        <!ELEMENT cos (%expression;)>
        <!ELEMENT cosh (%expression;)>
        <!ELEMENT exp (%expression;)>
        <!ELEMENT log (%expression;)>
        <!ELEMENT log10 (%expression;)>
        <!ELEMENT mod (%expression;, %expression;)>
        <!ELEMENT pow (%expression;, %expression;)>
        <!ELEMENT sin (%expression;)>
        <!ELEMENT sinh (%expression;)>
        <!ELEMENT tan (%expression;)>
        <!ELEMENT tanh (%expression;)>
        <!ELEMENT sqrt (%expression;)>
        <!ELEMENT ceil (%expression;)>
        <!ELEMENT floor (%expression;)>
        <!ELEMENT min ((%expression;)+)>
        <!ELEMENT max ((%expression;)+)>
        <!ELEMENT mean ((%expression;)+)>


        <!-- V.2.4. Boolean Expressions -->

        <!-- NOTE: Boolean AND, OR, NOT are renamed to avoid redefinition. -->
        <!ELEMENT bool_not (%expression;)>
        <!ELEMENT bool_and ((%expression;)+)>
        <!ELEMENT bool_or ((%expression;)+)>
        <!ELEMENT eq (%expression;, %expression;)>
        <!ELEMENT df (%expression;, %expression;)>
        <!ELEMENT lt (%expression;, %expression;)>
        <!ELEMENT gt (%expression;, %expression;)>
        <!ELEMENT leq (%expression;, %expression;)>
        <!ELEMENT geq (%expression;, %expression;)>


        <!-- V.2.5. Conditional Expressions -->

        <!ELEMENT ite (%expression;, %expression;, %expression;)>
        <!ELEMENT switch (case*, %expression;)>
        <!ELEMENT case (%expression;, %expression;)>


        <!-- V.2.6. Built-ins -->

        <!ELEMENT exponential (%expression;, %expression;)>
        <!ELEMENT GLM (%expression;, %expression;, %expression;, %expression;)>
        <!ELEMENT Weibull (%expression;, %expression;, %expression;, %expression;)>
        <!ELEMENT periodic-test ((%expression;)+)>
        <!ELEMENT extern-function ((%expression;)*)>
        <!ATTLIST extern-function name CDATA #REQUIRED>


        <!-- V.2.7. Random-Deviates -->

        <!ELEMENT uniform-deviate (%expression;, %expression;)>
        <!ELEMENT normal-deviate (%expression;, %expression;)>
        <!ELEMENT lognormal-deviate (%expression;, %expression;, %expression;)>
        <!ELEMENT gamma-deviate (%expression;, %expression;)>
        <!ELEMENT beta-deviate (%expression;, %expression;)>
        <!ELEMENT histogram (%expression;, bin+)>
        <!ELEMENT bin (%expression;, %expression;)>


        <!-- V.2.8. Test-Events -->

        <!ELEMENT test-initiating-event EMPTY>
        <!ATTLIST test-initiating-event name CDATA #REQUIRED>

        <!ELEMENT test-functional-event EMPTY>
        <!ATTLIST test-functional-event
                name CDATA #REQUIRED
                state CDATA #REQUIRED
                >
